#!/bin/bash

#echo "SubmitJobs (c) 2024 Liwei Ji, Wolfgang Tichy"

# ----------------
# Global Functions
# ----------------

source $(dirname "$(realpath "$0")")/src/utils.sh

# ---------------
# Local Functions
# ---------------

# Function to submit jobs
source $(dirname "$(realpath "$0")")/src/submit_job_scripts.sh

# Help message
display_usage() {
    echo "Usage: $0 -n <num_jobs:dependent_job_id> -e <executable_path> -p <param_file> [options]"
    echo ""
    echo "Required Arguments:"
    echo "  -n  Number of jobs and dependent job ID"
    echo "  -e  Path to the executable"
    echo "  -p  Path to the parameter file"
    echo ""
    echo "Optional Arguments:"
    echo "  -s  Subscript"
    echo "  OR provide all of the following:"
    echo "    -N  Number of nodes"
    echo "    -m  Number of MPI tasks"
    echo "    -o  Number of OpenMP threads"
    echo "    -t  Wall time (format: HH:MM:SS)"
    echo "    -q  Queue name"
    echo "    -a  Allocation name"
    echo ""
    echo "Additional Options:"
    echo "  -j  Job name (default: based on parameter file name)"
    echo "  -h  Display this help message"
    echo ""
    echo "Examples:"
    echo "  $0 -n 5 -e /path/to/executable -p params.par -s MySubscript"
    echo "  $0 -n 5 -e /path/to/executable -p params.par -N 4 -m 8 -o 2 -t 02:00:00 -q high_priority -a my_project"
}

# Handle argument parsing
process_arguments() {
    local args=()

    # Preprocess long options
    for arg in "$@"; do
        case "$arg" in
            --help)
                display_usage; exit 0 ;;
            *)
                args+=("$arg") ;;
        esac
    done

    # Reset positional arguments for `getopts`
    set -- "${args[@]}"

    # Parse short options
    while getopts ":n:e:p:N:m:o:t:q:a:s:j:h" opt; do
        case $opt in
            n) num_jobs_dependent_job_id="$OPTARG" ;;
            e) executable_path="$OPTARG" ;;
            p) param_file="$OPTARG" ;;
            N) num_nodes="$OPTARG" ;;
            m) num_mpi_tasks="$OPTARG" ;;
            o) num_omp_threads="$OPTARG" ;;
            t) wall_time="$OPTARG" ;;
            q) queue_name="$OPTARG" ;;
            a) allocation_name="$OPTARG" ;;
            s) subscript="$OPTARG" ;;
            j) job_name_input="$OPTARG" ;;
            h) display_usage; exit 0 ;;
            :) echo "Error: Option -$OPTARG requires an argument." >&2; display_usage; exit 1 ;;
            \?) echo "Error: Invalid option -$OPTARG" >&2; display_usage; exit 1 ;;
        esac
    done
}

# Display job configuration
display_job_config() {
    echo "Job Configuration:"
    echo "------------------"
    echo "Number of jobs:  ${num_jobs:-N/A}"
    echo "Executable:      ${executable_path:-N/A}"
    echo "Parameter file:  ${param_file:-N/A}"

    echo "Nodes:           ${num_nodes:-N/A}"
    echo "MPI tasks:       ${num_mpi_tasks:-N/A}"
    echo "OMP threads:     ${num_omp_threads:-N/A}"
    echo "Wall time:       ${wall_time:-N/A}"
    echo "Queue:           ${queue_name:-N/A}"
    echo "Allocation:      ${allocation_name:-N/A}"

    echo "Subscript:       ${subscript:-N/A}"
    echo "Job name:        ${job_name:-N/A}"
}

# -------------
# Main Function
# -------------


main() {
    # Default Values
    default_subscript="subscript-baremetal"

    # Process arguments
    process_arguments "$@"

    # Ensure required arguments are provided
    if [[ -z "$num_jobs_dependent_job_id" || -z "$executable_path" || -z "$param_file" ]]; then
        echo "Error: Missing required arguments." >&2
        display_usage
        exit 1
    fi

    # Parse input arguments
    num_jobs=$(echo "$num_jobs_dependent_job_id" | awk -F: '{ print $1 }')
    dependent_job_id=$(echo "$num_jobs_dependent_job_id" | awk -F: '{ print $2 }')

    # Fallback to defaults for optional arguments
    subscript=${subscript:-$default_subscript}

    # Enhance job name with resource details if available
    if [[ -n "$job_name_input" && -n "$num_nodes" && -n "$num_mpi_tasks" ]]; then
        job_name="${job_name_input}-N${num_nodes}-MPI${num_mpi_tasks}"
    else
        job_name=${job_name_input:-${param_file%.par}}
    fi

    # Export variables for child shells
    export SUBMITJOBS_JOBNAME="$job_name"
    export SUBMITJOBS_PARFILE="$param_file"

    # Display the job configuration
    display_job_config

    # Determine host-specific behavior
    if [[ $HOSTNAME =~ login[1-4]\.frontera\.tacc\.utexas\.edu ]]; then

        if [[ "$executable_path" = /* ]]; then
            export SUBMITJOBS_MPIRUN="ibrun $executable_path $param_file"
        else
            export SUBMITJOBS_MPIRUN="ibrun ../$executable_path $param_file"
        fi

        # Submit jobs
        submit_job_slurm

    elif [[ $HOSTNAME =~ login[1-4]\.vista\.tacc\.utexas\.edu ]]; then

        if [[ "$executable_path" = /* ]]; then
            export SUBMITJOBS_MPIRUN="ibrun $executable_path $param_file"
        else
            export SUBMITJOBS_MPIRUN="ibrun ../$executable_path $param_file"
        fi

        # Submit jobs
        submit_job_slurm

    elif [[ $HOSTNAME =~ login[0-9][0-9].frontier.olcf.ornl.gov ]]; then

        if [[ "$executable_path" = /* ]]; then
            export SUBMITJOBS_MPIRUN="srun $executable_path $param_file"
        else
            export SUBMITJOBS_MPIRUN="srun ../$executable_path $param_file"
        fi

        # Submit jobs
        submit_job_slurm

    elif [[ $HOSTNAME =~ green-prairies.cluster ]]; then

        if [[ "$executable_path" = /* ]]; then
            export SUBMITJOBS_MPIRUN="mpiexec.hydra -machinefile $PBS_NODEFILE -np $(wc -l < "$PBS_NODEFILE") $executable_path $param_file"
        else
            export SUBMITJOBS_MPIRUN="mpiexec.hydra -machinefile $PBS_NODEFILE -np $(wc -l < "$PBS_NODEFILE") ../$executable_path $param_file"
        fi

        # Submit jobs
        submit_job_pbs

    else

        echo "Unknown host: $HOSTNAME"
        echo "This host is not configured. Exiting."

    fi
}

# Entry point
main "$@"
