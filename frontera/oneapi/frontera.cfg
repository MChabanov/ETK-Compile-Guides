# Whenever this version string changes, the application is configured
# and rebuilt from scratch
VERSION = frontera-2024-11-24

CPP = cpp
CC  = icx
CXX = icpx
FPP = cpp
F90 = ifx

CPPFLAGS = -g -DSIMD_DISABLE
FPPFLAGS = -g -traditional
CFLAGS   = -g -xCORE-AVX512 -align -std=gnu11 -pipe
CXXFLAGS = -g -xCORE-AVX512 -align -std=c++17 -pipe
F90FLAGS = -g -traceback -debug all -xCORE-AVX512 -align -pad -safe-cray-ptr

LDFLAGS = -Wl,--export-dynamic -xCORE-AVX512
LIBDIRS = ${TACC_GSL_DIR}/lib
SYS_INC_DIRS = ${TACC_GSL_DIR}/include

C_LINE_DIRECTIVES = yes
F_LINE_DIRECTIVES = yes

VECTORISE = no

DEBUG           = no
CPP_DEBUG_FLAGS = -DCARPET_DEBUG
FPP_DEBUG_FLAGS = -DCARPET_DEBUG
C_DEBUG_FLAGS   = -O0
CXX_DEBUG_FLAGS = -O0
F90_DEBUG_FLAGS = -O0 -check bounds -check format

# -ipo increases dramatically the compilation time, but it can
# lead to a 1-2% performance boost
# -O2 is intel's default

OPTIMISE           = yes
CPP_OPTIMISE_FLAGS = # -DCARPET_OPTIMISE -DNDEBUG
FPP_OPTIMISE_FLAGS = # -DCARPET_OPTIMISE -DNDEBUG
C_OPTIMISE_FLAGS   = -Ofast #-O2 # -ipo
CXX_OPTIMISE_FLAGS = -Ofast #-O2 # -ipo
F90_OPTIMISE_FLAGS = -Ofast #-O2 # -ipo

CPP_NO_OPTIMISE_FLAGS  =
FPP_NO_OPTIMISE_FLAGS  =
C_NO_OPTIMISE_FLAGS    = -O0
CXX_NO_OPTIMISE_FLAGS  = -O0
CUCC_NO_OPTIMISE_FLAGS =
F90_NO_OPTIMISE_FLAGS  = -O0

PROFILE           = no
CPP_PROFILE_FLAGS =
FPP_PROFILE_FLAGS =
C_PROFILE_FLAGS   = -pg
CXX_PROFILE_FLAGS = -pg
F90_PROFILE_FLAGS = -pg

OPENMP           = yes
CPP_OPENMP_FLAGS = -fopenmp
FPP_OPENMP_FLAGS = -fopenmp
C_OPENMP_FLAGS   = -fopenmp
CXX_OPENMP_FLAGS = -fopenmp
F90_OPENMP_FLAGS = -fopenmp

WARN           = yes
CPP_WARN_FLAGS =
FPP_WARN_FLAGS =
C_WARN_FLAGS   =
CXX_WARN_FLAGS =
F90_WARN_FLAGS =


BLAS_DIR  = ${MKLROOT}/lib/intel64
BLAS_LIBS = mkl_intel_lp64 mkl_sequential mkl_core

LAPACK_DIR  = ${MKLROOT}/lib/intel64
LAPACK_LIBS = mkl_intel_lp64 mkl_sequential mkl_core

OPENBLAS_DIR  = ${MKLROOT}
OPENBLAS_LIB_DIRS  = ${MKLROOT}/lib/intel64
OPENBLAS_LIBS = mkl_intel_lp64 mkl_sequential mkl_core

HDF5_DIR = ${TACC_PHDF5_DIR}
HDF5_INC_DIRS = ${TACC_PHDF5_DIR}/include
HDF5_LIB_DIRS = ${TACC_PHDF5_DIR}/lib
HDF5_LIBS = hdf5_hl_fortran hdf5_hl hdf5_fortran hdf5

# GSL's detect calls gsl-config which returns wrong results
# as a workaround the directories were added to LIBDIRS and SYS_INC_DIRS above
GSL_DIR = ${TACC_GSL_DIR}
# GSL_INC_DIRS = ${TACC_GSL_DIR}/include
# GSL_LIB_DIRS = ${TACC_GSL_DIR}/lib
# GSL_LIBS = gsl gslcblas m

HWLOC_DIR = ${TACC_HWLOC_DIR}

MPI_DIR      = ${TACC_IMPI_DIR}
MPI_INC_DIRS = ${TACC_IMPI_DIR}/include
MPI_LIB_DIRS = ${TACC_IMPI_DIR}/lib/release ${TACC_IMPI_DIR}/lib
MPI_LIBS     = mpicxx mpifort mpi dl rt pthread

FFTW3_DIR      = ${MKLROOT}
FFTW3_LIB_DIRS = ${MKLROOT}/lib/intel64
FFTW3_INC_DIRS = ${MKLROOT}/include/fftw
FFTW3_LIBS     = mkl_intel_lp64 mkl_sequential mkl_core

ADIOS2_DIR  = ${TACC_ADIOS2_DIR}
ADIOS2_INC_DIRS = ${TACC_ADIOS2_DIR}/include
ADIOS2_LIB_DIRS = ${TACC_ADIOS2_DIR}/lib64
ADIOS2_LIBS = adios2_cxx11_mpi adios2_cxx11

PAPI_DIR = ${TACC_PAPI_DIR}

BOOST_DIR = ${TACC_BOOST_DIR}

PETSC_LAPACK_EXTRA_LIBS = mkl_intel_lp64 mkl_sequential mkl_core

PTHREADS_DIR = NO_BUILD
