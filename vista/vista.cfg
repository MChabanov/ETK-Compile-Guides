# Whenever this version string changes, the application is configured
# and rebuilt from scratch

VERSION = delta-2024-02-08

CPP  = cpp
FPP  = cpp
CC   = gcc
CXX  = g++
F90  = gfortran
CUCC = nvcc

# subset CUCCFLAGS without "-x cu" (must no be used here) and options used only to compile code
# must set LD and not LDFLAGS to avoid ExternalLibraries picking up the options
LD = nvcc --compiler-bindir g++ -g --forward-unknown-to-host-compiler --relocatable-device-code=true --objdir-as-tempdir

CPPFLAGS = -DSIMD_CPU
FPPFLAGS  = -traditional -march=znver2
# do not add -std=gn99 or -std=c99 below since that causes nvcc to fail linking
# HydroRNSID's utilities. GCC on Delta defaults to c17, so is "new enough"
CFLAGS    = -m128bit-long-double -D_GNU_SOURCE -fomit-frame-pointer
CXXFLAGS  = -m128bit-long-double -std=c++17 -D_GNU_SOURCE -fomit-frame-pointer
F90FLAGS  = -m128bit-long-double -fcray-pointer -ffixed-line-length-none -fno-range-check -march=znver2 -fomit-frame-pointer
CUCCFLAGS = -pipe -g --compiler-options -march=native -std=c++17 --compiler-options -std=gnu++17 --expt-relaxed-constexpr --extended-lambda --gpu-architecture sm_70 --forward-unknown-to-host-compiler --Werror ext-lambda-captures-this --relocatable-device-code=true --objdir-as-tempdir -x cu

LIBS = gfortran nvToolsExt curand

C_LINE_DIRECTIVES = yes
F_LINE_DIRECTIVES = yes

VECTORISE                = yes
VECTORISE_ALIGNED_ARRAYS = no
VECTORISE_INLINE         = yes

DEBUG            = no
CPP_DEBUG_FLAGS  = -g -DCARPET_DEBUG
FPP_DEBUG_FLAGS  = -g -DCARPET_DEBUG
C_DEBUG_FLAGS    = -g -ftrapv -fstack-protector-all -fbounds-check
CXX_DEBUG_FLAGS  = -g -ftrapv -fstack-protector-all -fbounds-check
CUCC_DEBUG_FLAGS =
F90_DEBUG_FLAGS  = -g -ftrapv -fstack-protector-all -fcheck=bounds,do,mem,pointer,recursion -finit-character=65 -finit-integer=42424242 -finit-real=nan

OPTIMISE            = yes
CPP_OPTIMISE_FLAGS  = # -DCARPET_OPTIMISE -DNDEBUG
FPP_OPTIMISE_FLAGS  = # -DCARPET_OPTIMISE -DNDEBUG
C_OPTIMISE_FLAGS    = -O3
CUCC_OPTIMISE_FLAGS =
CXX_OPTIMISE_FLAGS  = -O3
F90_OPTIMISE_FLAGS  = -O3

PROFILE           = no
CPP_PROFILE_FLAGS =
FPP_PROFILE_FLAGS =
C_PROFILE_FLAGS   = -pg
CXX_PROFILE_FLAGS = -pg
F90_PROFILE_FLAGS = -pg

OPENMP           = yes
CPP_OPENMP_FLAGS = -fopenmp
FPP_OPENMP_FLAGS = -fopenmp
C_OPENMP_FLAGS   = -fopenmp
CXX_OPENMP_FLAGS = -fopenmp
F90_OPENMP_FLAGS = -fopenmp

WARN            = no
CPP_WARN_FLAGS  = -Wall
FPP_WARN_FLAGS  = -Wall
C_WARN_FLAGS    = -Wall
CXX_WARN_FLAGS  = -Wall
CUCC_WARN_FLAGS = -Xcompiler -Wall
F90_WARN_FLAGS  = -Wall

# CUDA does not support these
DISABLE_INT16 = yes
DISABLE_REAL16 = yes

VECTORISE = no

ADIOS2_DIR = ${OLCF_ADIOS2_ROOT}
ADIOS2_INC_DIRS = ${OLCF_ADIOS2_ROOT}/include
ADIOS2_LIB_DIRS = ${OLCF_ADIOS2_ROOT}/lib64
ADIOS2_LIBS = adios2_cxx11_mpi adios2_cxx11

AMREX_DIR = ${ETKPATH}/amrex-lib

#MPI_DIR      = ${CRAY_MPICH_DIR}
#MPI_INC_DIRS = ${CRAY_MPICH_DIR}/include
#MPI_LIB_DIRS = ${CRAY_MPICH_DIR}/lib
#MPI_LIBS     = mpi mpi_gtl_hsa xpmem

BLAS_DIR     = ${CRAY_LIBSCI_PREFIX_DIR}
BLAS_LIBS    =
LAPACK_DIR   = ${CRAY_LIBSCI_PREFIX_DIR}
LAPACK_LIBS  =

BOOST_DIR    = ${BOOST_ROOT}
FFTW3_DIR    = ${FFTW_ROOT}
GSL_DIR      = ${OLCF_GSL_ROOT}
HDF5_DIR     = ${HDF5_ROOT}
HWLOC_DIR    = ${OLCF_HWLOC_ROOT}
LIBJPEG_DIR  = ${OLCF_LIBJPEG_TURBO_ROOT}

#OPENBLAS_DIR = ${OLCF_OPENBLAS_ROOT}
#PTHREADS_DIR = NO_BUILD
#SILO_DIR     = BUILD
#SSHT_DIR     = BUILD
#YAML_CPP_DIR = BUILD
#ZLIB_DIR     = ${OLCF_ZLIB_ROOT}
